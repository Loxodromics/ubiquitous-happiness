#include <Arduino.h>
#include <Adafruit_NeoPixel.h>

#define NUM_PIXEL 60
#define PIXEL_PIN 0
#define MAX_ADC 1024
#define HOLD_TIMER 3
#define MAX_VALUE_SUM_COUNTER 20

int lookup[] = {32, 45, 55, 64, 71, 78, 84, 90, 96, 101, 106, 110, 115, 119, 123, 128, 131, 135, 139, 143, 146, 150, 153, 156, 160, 163, 166, 169, 172, 175, 178, 181, 183, 186, 189, 192, 194, 197, 199, 202, 204, 207, 209, 212, 214, 217, 219, 221, 224, 226, 228, 230, 232, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 256, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 278, 280, 282, 284, 286, 288, 289, 291, 293, 295, 296, 298, 300, 301, 303, 305, 306, 308, 310, 311, 313, 315, 316, 318, 320, 321, 323, 324, 326, 327, 329, 331, 332, 334, 335, 337, 338, 340, 341, 343, 344, 346, 347, 349, 350, 352, 353, 354, 356, 357, 359, 360, 362, 363, 364, 366, 367, 369, 370, 371, 373, 374, 375, 377, 378, 379, 381, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 576, 577, 578, 579, 580, 581, 582, 583, 583, 584, 585, 586, 587, 588, 589, 590, 590, 591, 592, 593, 594, 595, 596, 596, 597, 598, 599, 600, 601, 602, 602, 603, 604, 605, 606, 607, 608, 608, 609, 610, 611, 612, 613, 613, 614, 615, 616, 617, 618, 618, 619, 620, 621, 622, 622, 623, 624, 625, 626, 627, 627, 628, 629, 630, 631, 631, 632, 633, 634, 635, 635, 636, 637, 638, 639, 640, 640, 641, 642, 643, 643, 644, 645, 646, 647, 647, 648, 649, 650, 651, 651, 652, 653, 654, 655, 655, 656, 657, 658, 658, 659, 660, 661, 662, 662, 663, 664, 665, 665, 666, 667, 668, 668, 669, 670, 671, 672, 672, 673, 674, 675, 675, 676, 677, 678, 678, 679, 680, 681, 681, 682, 683, 684, 684, 685, 686, 687, 687, 688, 689, 690, 690, 691, 692, 693, 693, 694, 695, 695, 696, 697, 698, 698, 699, 700, 701, 701, 702, 703, 704, 704, 705, 706, 706, 707, 708, 709, 709, 710, 711, 711, 712, 713, 714, 714, 715, 716, 716, 717, 718, 719, 719, 720, 721, 721, 722, 723, 724, 724, 725, 726, 726, 727, 728, 729, 729, 730, 731, 731, 732, 733, 733, 734, 735, 736, 736, 737, 738, 738, 739, 740, 740, 741, 742, 742, 743, 744, 744, 745, 746, 747, 747, 748, 749, 749, 750, 751, 751, 752, 753, 753, 754, 755, 755, 756, 757, 757, 758, 759, 759, 760, 761, 761, 762, 763, 763, 764, 765, 765, 766, 767, 768, 768, 769, 769, 770, 771, 771, 772, 773, 773, 774, 775, 775, 776, 777, 777, 778, 779, 779, 780, 781, 781, 782, 783, 783, 784, 785, 785, 786, 787, 787, 788, 789, 789, 790, 790, 791, 792, 792, 793, 794, 794, 795, 796, 796, 797, 798, 798, 799, 800, 800, 801, 801, 802, 803, 803, 804, 805, 805, 806, 807, 807, 808, 808, 809, 810, 810, 811, 812, 812, 813, 813, 814, 815, 815, 816, 817, 817, 818, 818, 819, 820, 820, 821, 822, 822, 823, 823, 824, 825, 825, 826, 827, 827, 828, 828, 829, 830, 830, 831, 832, 832, 833, 833, 834, 835, 835, 836, 836, 837, 838, 838, 839, 839, 840, 841, 841, 842, 843, 843, 844, 844, 845, 846, 846, 847, 847, 848, 849, 849, 850, 850, 851, 852, 852, 853, 853, 854, 855, 855, 856, 856, 857, 858, 858, 859, 859, 860, 861, 861, 862, 862, 863, 864, 864, 865, 865, 866, 866, 867, 868, 868, 869, 869, 870, 871, 871, 872, 872, 873, 874, 874, 875, 875, 876, 876, 877, 878, 878, 879, 879, 880, 881, 881, 882, 882, 883, 883, 884, 885, 885, 886, 886, 887, 887, 888, 889, 889, 890, 890, 891, 891, 892, 893, 893, 894, 894, 895, 896, 896, 897, 897, 898, 898, 899, 899, 900, 901, 901, 902, 902, 903, 903, 904, 905, 905, 906, 906, 907, 907, 908, 909, 909, 910, 910, 911, 911, 912, 912, 913, 914, 914, 915, 915, 916, 916, 917, 918, 918, 919, 919, 920, 920, 921, 921, 922, 923, 923, 924, 924, 925, 925, 926, 926, 927, 928, 928, 929, 929, 930, 930, 931, 931, 932, 932, 933, 934, 934, 935, 935, 936, 936, 937, 937, 938, 938, 939, 940, 940, 941, 941, 942, 942, 943, 943, 944, 944, 945, 946, 946, 947, 947, 948, 948, 949, 949, 950, 950, 951, 951, 952, 953, 953, 954, 954, 955, 955, 956, 956, 957, 957, 958, 958, 959, 960, 960, 961, 961, 962, 962, 963, 963, 964, 964, 965, 965, 966, 966, 967, 967, 968, 969, 969, 970, 970, 971, 971, 972, 972, 973, 973, 974, 974, 975, 975, 976, 976, 977, 977, 978, 979, 979, 980, 980, 981, 981, 982, 982, 983, 983, 984, 984, 985, 985, 986, 986, 987, 987, 988, 988, 989, 989, 990, 990, 991, 992, 992, 993, 993, 994, 994, 995, 995, 996, 996, 997, 997, 998, 998, 999, 999, 1000, 1000, 1001, 1001, 1002, 1002, 1003, 1003, 1004, 1004, 1005, 1005, 1006, 1006, 1007, 1007, 1008, 1008, 1009, 1009, 1010, 1010, 1011, 1011, 1012, 1012, 1013, 1013, 1014, 1014, 1015, 1015, 1016, 1016, 1017, 1017, 1018, 1018, 1019, 1019, 1020, 1020, 1021, 1021, 1022, 1022, 1023, 1024};

Adafruit_NeoPixel *strip;
int holdValue = 0;
int holdTimer = 0;
int valueSum = 0;
int valueSumCounter = 0;

void mapColor(int input, u8 *red, u8 *green)
{
  if (input < NUM_PIXEL/2)
  {
    *green = 255;
    *red = (input * 255) / (NUM_PIXEL / 2);
  }
  else
  {
    *red = 255;
    input -= NUM_PIXEL / 2;
    *green = 255 - ((input * 255) / (NUM_PIXEL / 2));
  }
}


void setup() {
  // put your setup code here, to run once:
  pinMode(D4, OUTPUT);

  strip = new Adafruit_NeoPixel(NUM_PIXEL, PIXEL_PIN, NEO_GRB | NEO_KHZ800);
  strip->begin();
  strip->show();
}

void loop() {

  int value = analogRead(A0);
  value -= MAX_ADC / 2;
  if (value < 0)
    value *= -1;

  valueSum += value;
  
  valueSumCounter++;
  delay(5);

  if (valueSumCounter < MAX_VALUE_SUM_COUNTER) 
    return;

  value = valueSum / valueSumCounter;
  valueSumCounter = 0;
  valueSum = 0;
  value = lookup[value];

  int valuePixel = (value * NUM_PIXEL) / (MAX_ADC / 2);
  u8 red = 0;
  u8 green = 0;

  for (int eachPixel = 0; eachPixel < NUM_PIXEL; ++eachPixel)
  {
    if (eachPixel < valuePixel)
      mapColor(eachPixel, &red, &green);
    else
    {
      red = 0;
      green = 0;
    }
      
    strip->setPixelColor(eachPixel, red, green, 0);
  }

  if (valuePixel > holdValue)
  {
    holdValue = valuePixel;
    holdTimer = HOLD_TIMER;
  }

  if (holdTimer > 0)
    holdTimer--;

  if (holdTimer == 0 && holdValue > 0)
  {
    holdValue--;
    holdTimer = HOLD_TIMER;
  }

  mapColor(holdValue, &red, &green);
  strip->setPixelColor(holdValue, red, green, 0);

  strip->show();

}
